// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendMessageClient is the client API for SendMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMessageClient interface {
	RequestMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUsers(ctx context.Context, in *Request, opts ...grpc.CallOption) (SendMessage_GetUsersClient, error)
}

type sendMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMessageClient(cc grpc.ClientConnInterface) SendMessageClient {
	return &sendMessageClient{cc}
}

func (c *sendMessageClient) RequestMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/SendMessage/RequestMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) GetUsers(ctx context.Context, in *Request, opts ...grpc.CallOption) (SendMessage_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SendMessage_ServiceDesc.Streams[0], "/SendMessage/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendMessageGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SendMessage_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type sendMessageGetUsersClient struct {
	grpc.ClientStream
}

func (x *sendMessageGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendMessageServer is the server API for SendMessage service.
// All implementations must embed UnimplementedSendMessageServer
// for forward compatibility
type SendMessageServer interface {
	RequestMessage(context.Context, *Request) (*Response, error)
	GetUsers(*Request, SendMessage_GetUsersServer) error
	mustEmbedUnimplementedSendMessageServer()
}

// UnimplementedSendMessageServer must be embedded to have forward compatible implementations.
type UnimplementedSendMessageServer struct {
}

func (UnimplementedSendMessageServer) RequestMessage(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMessage not implemented")
}
func (UnimplementedSendMessageServer) GetUsers(*Request, SendMessage_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedSendMessageServer) mustEmbedUnimplementedSendMessageServer() {}

// UnsafeSendMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMessageServer will
// result in compilation errors.
type UnsafeSendMessageServer interface {
	mustEmbedUnimplementedSendMessageServer()
}

func RegisterSendMessageServer(s grpc.ServiceRegistrar, srv SendMessageServer) {
	s.RegisterService(&SendMessage_ServiceDesc, srv)
}

func _SendMessage_RequestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).RequestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/RequestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).RequestMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SendMessageServer).GetUsers(m, &sendMessageGetUsersServer{stream})
}

type SendMessage_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type sendMessageGetUsersServer struct {
	grpc.ServerStream
}

func (x *sendMessageGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// SendMessage_ServiceDesc is the grpc.ServiceDesc for SendMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendMessage",
	HandlerType: (*SendMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMessage",
			Handler:    _SendMessage_RequestMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _SendMessage_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/message.proto",
}
